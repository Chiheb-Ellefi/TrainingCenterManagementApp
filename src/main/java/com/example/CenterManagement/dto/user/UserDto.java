package com.example.CenterManagement.dto.user;

import com.example.CenterManagement.entities.user.Gender;
import com.example.CenterManagement.entities.user.Role;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.io.Serializable;
import java.util.Date;

@Builder
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "Data transfer object representing a user")
public class UserDto implements Serializable {
    private static final long serialVersionUID = 1L;

    @Schema(
            description = "Unique identifier of the user (autogenerated)",
            example = "1",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    private Long userId;

    @NotBlank(message = "Username cannot be blank")
    @Size(min = 3, max = 50, message = "Username must be between 3 and 50 characters")
    @Schema(
            description = "Username of the user",
            example = "johndoe",
            requiredMode = Schema.RequiredMode.REQUIRED
    )
    private String username;

    @Email(message = "Invalid email format")
    @NotBlank(message = "Email cannot be blank")
    @Schema(
            description = "Email address of the user (must be unique)",
            example = "johndoe@example.com",
            requiredMode = Schema.RequiredMode.REQUIRED
    )
    private String email;

    @JsonIgnore
    @NotBlank(message = "Password cannot be blank")
    @Size(min = 6, max = 100, message = "Password must be between 6 and 100 characters")
    private String password;

    @NotNull(message = "Role cannot be null")
    @Schema(
            description = "Role of the user (e.g., PARTICIPANT, TRAINER, ADMIN)",
            example = "PARTICIPANT",
            requiredMode = Schema.RequiredMode.REQUIRED
    )
    private Role role;

    @Schema(
            description = "Verification status of the user (default is false)",
            example = "false",
            defaultValue = "false"
    )
    private Boolean isVerified;

    @Size(min = 10, max = 15, message = "Phone number must be between 10 and 15 characters")
    @Schema(
            description = "Primary phone number of the user",
            example = "+1234567890",
            requiredMode = Schema.RequiredMode.NOT_REQUIRED
    )
    private String phoneNumber;

    @Size(min = 10, max = 15, message = "Secondary phone number must be between 10 and 15 characters")
    @Schema(
            description = "Secondary phone number of the user",
            example = "+0987654321",
            requiredMode = Schema.RequiredMode.NOT_REQUIRED
    )
    private String secondPhoneNumber;

    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @Schema(
            description = "Birth date of the user",
            example = "1990-01-01",
            type = "string",
            format = "date",
            requiredMode = Schema.RequiredMode.NOT_REQUIRED
    )
    private Date dateOfBirth;

    @Schema(
            description = "Gender of the user",
            example = "MALE",
            allowableValues = {"MALE", "FEMALE", "OTHER"},
            requiredMode = Schema.RequiredMode.NOT_REQUIRED
    )
    private Gender gender;

    @Schema(
            description = "Profile picture URL of the user",
            example = "https://example.com/profile.jpg",
            requiredMode = Schema.RequiredMode.NOT_REQUIRED
    )
    private String profilePicture;

    @Size(max = 255, message = "Description must not exceed 255 characters")
    @Schema(
            description = "Short description about the user",
            example = "A passionate participant in fitness programs",
            requiredMode = Schema.RequiredMode.NOT_REQUIRED
    )
    private String description;
}